package org.baessie.simulator.jdbc.driver;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import org.baessie.simulator.jdbc.expectation.ExpectationManager;
import org.baessie.simulator.jdbc.expectation.ExpectedResult;
import org.baessie.simulator.jdbc.expectation.Logger;

public class SimulatorPreparedStatement implements PreparedStatement {
	private final String query;
	private ExpectedResult expectedResult;
	private final List<ParameterValue> positionalParameters = new ArrayList<ParameterValue>();

	public SimulatorPreparedStatement(final String query) {
		this.query = query;
		this.expectedResult = null;
	}

	public SimulatorPreparedStatement(final ExpectedResult expectedResult) {
		this.query = null;
		this.expectedResult = expectedResult;
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		Logger.log("SimulatorPreparedStatement.getResultSet()");
		return new SimulatorResultSet(getExpectedResultSet());
	}

	private ExpectedResult getExpectedResultSet() {
		if (expectedResult != null) {
			Logger.log("SimulatorPreparedStatement.getExpectedResultSet()1");
			return expectedResult;
		} else {
			Logger.log("SimulatorPreparedStatement.getExpectedResultSet()2");
			ExpectedResult result = ExpectationManager.getExpectedResultFor(createQueryWithParameters());
			expectedResult = result;
			return result;
		}
	}

	private String createQueryWithParameters() {
		String parameterizedQuery = query;
		int pos = 1;
		while (parameterizedQuery.contains("?")) {
			ParameterValue parameterValue = positionalParameters.get(pos++);
			if (parameterValue == null) {
				parameterizedQuery = parameterizedQuery.replaceFirst("\\?", "''");
			} else if (parameterValue.type.isAssignableFrom(String.class)) {
				parameterizedQuery = parameterizedQuery.replaceFirst("\\?", "'" + parameterValue.value + "'");
			} else {
				parameterizedQuery = parameterizedQuery.replaceFirst("\\?", "'" + String.valueOf(parameterValue.value) + "'");
			}
		}
		return parameterizedQuery;
	}

	private void setPositionalParameter(int parameterIndex, ParameterValue value) {
		while (positionalParameters.size() <= parameterIndex) {
			positionalParameters.add(null);
		}
		positionalParameters.set(parameterIndex, value);
	}

	@Override
	public int getFetchSize() throws SQLException {
		Logger.log("SimulatorPreparedStatement.getFetchSize()");
		return getExpectedResultSet().getRows().size();
	}

	@Override
	public ResultSetMetaData getMetaData() throws SQLException {
		Logger.log("SimulatorPreparedStatement.getMetaData()");
		return new SimulatorResultSetMetaData(getExpectedResultSet());
	}

	@Override
	public int executeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
		Logger.log("SimulatorPreparedStatement.executeUpdate()1");
		if (this.query != null) {
			this.expectedResult = null;
			this.expectedResult = getExpectedResultSet();
		}
		return getRowCount();
	}

	private int getRowCount() {
		return getExpectedResultSet().getRows().size();
	}

	@Override
	public int executeUpdate(final String sql, final int[] columnIndexes) throws SQLException {
		Logger.log("SimulatorPreparedStatement.executeUpdate()2");
		if (this.query != null) {
			this.expectedResult = null;
			this.expectedResult = getExpectedResultSet();
		}
		return getRowCount();
	}

	@Override
	public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {
		Logger.log("SimulatorPreparedStatement.executeUpdate()3");
		if (this.query != null) {
			this.expectedResult = null;
			this.expectedResult = getExpectedResultSet();
		}
		return getRowCount();
	}

	@Override
	public boolean execute(final String sql, final int autoGeneratedKeys) throws SQLException {
		Logger.log("SimulatorPreparedStatement.execute()2");
		if (this.query != null) {
			this.expectedResult = null;
			this.expectedResult = getExpectedResultSet();
		}
		return false;
	}

	@Override
	public boolean execute(final String sql, final int[] columnIndexes) throws SQLException {
		Logger.log("SimulatorPreparedStatement.execute()3");
		if (this.query != null) {
			this.expectedResult = null;
			this.expectedResult = getExpectedResultSet();
		}
		return false;
	}

	@Override
	public boolean execute(final String sql, final String[] columnNames) throws SQLException {
		Logger.log("SimulatorPreparedStatement.execute()4");
		if (this.query != null) {
			this.expectedResult = null;
			this.expectedResult = getExpectedResultSet();
		}
		return false;
	}

	@Override
	public ResultSet executeQuery(final String sql) throws SQLException {
		Logger.log("SimulatorPreparedStatement.executeQuery()1");
		if (this.query != null) {
			this.expectedResult = null;
			this.expectedResult = getExpectedResultSet();
		}
		return getResultSet();
	}

	@Override
	public int executeUpdate(final String sql) throws SQLException {
		Logger.log("SimulatorPreparedStatement.executeUpdate()1");
		if (this.query != null) {
			this.expectedResult = null;
			this.expectedResult = getExpectedResultSet();
		}
		return getRowCount();
	}

	@Override
	public boolean execute() throws SQLException {
		Logger.log("SimulatorPreparedStatement.execute()5");
		if (this.query != null) {
			this.expectedResult = null;
			this.expectedResult = getExpectedResultSet();
		}
		return false;
	}

	@Override
	public boolean execute(final String sql) throws SQLException {
		Logger.log("SimulatorPreparedStatement.execute()1");
		if (this.query != null) {
			this.expectedResult = null;
			this.expectedResult = getExpectedResultSet();
		}
		return false;
	}

	@Override
	public ResultSet executeQuery() throws SQLException {
		Logger.log("SimulatorPreparedStatement.executeQuery()2");
		if (this.query != null) {
			this.expectedResult = null;
			this.expectedResult = getExpectedResultSet();
		}
		return getResultSet();
	}

	@Override
	public int executeUpdate() throws SQLException {
		Logger.log("SimulatorPreparedStatement.executeUpdate()2");
		if (this.query != null) {
			this.expectedResult = null;
			this.expectedResult = getExpectedResultSet();
		}
		return getRowCount();
	}

	// --- Unimplemented methods below

	@Override
	public void close() throws SQLException {
		Logger.log("SimulatorPreparedStatement.close()");
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		Logger.log("SimulatorPreparedStatement.getMaxFieldSize()");
		return 0;
	}

	@Override
	public void setMaxFieldSize(final int max) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setMaxFieldSize()");
	}

	@Override
	public int getMaxRows() throws SQLException {
		Logger.log("SimulatorPreparedStatement.getMaxRows()");
		return 0;
	}

	@Override
	public void setMaxRows(final int max) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setMaxRows()");
	}

	@Override
	public void setEscapeProcessing(final boolean enable) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setEscapeProcessing()");
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		Logger.log("SimulatorPreparedStatement.getQueryTimeout()");
		return 0;
	}

	@Override
	public void setQueryTimeout(final int seconds) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setQueryTimeout()");
	}

	@Override
	public void cancel() throws SQLException {
		Logger.log("SimulatorPreparedStatement.cancel()");
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		Logger.log("SimulatorPreparedStatement.getWarnings()");
		return null;
	}

	@Override
	public void clearWarnings() throws SQLException {
		Logger.log("SimulatorPreparedStatement.clearWarnings()");
	}

	@Override
	public void setCursorName(final String name) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setCursorName()");
	}

	@Override
	public int getUpdateCount() throws SQLException {
		Logger.log("SimulatorPreparedStatement.getUpdateCount()");
		return 0;
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		Logger.log("SimulatorPreparedStatement.getMoreResults()");
		return false;
	}

	@Override
	public void setFetchDirection(final int direction) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setFetchDirection()");
	}

	@Override
	public int getFetchDirection() throws SQLException {
		Logger.log("SimulatorPreparedStatement.getFetchDirection()");
		return 0;
	}

	@Override
	public void setFetchSize(final int rows) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setFetchSize()");
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		Logger.log("SimulatorPreparedStatement.getResultSetConcurrency()");
		return 0;
	}

	@Override
	public int getResultSetType() throws SQLException {
		Logger.log("SimulatorPreparedStatement.getResultSetType()");
		return 0;
	}

	@Override
	public void addBatch(final String sql) throws SQLException {
		Logger.log("SimulatorPreparedStatement.addBatch()");
	}

	@Override
	public void clearBatch() throws SQLException {
		Logger.log("SimulatorPreparedStatement.clearBatch()");
	}

	@Override
	public int[] executeBatch() throws SQLException {
		Logger.log("SimulatorPreparedStatement.executeBatch()");
		return null;
	}

	@Override
	public Connection getConnection() throws SQLException {
		Logger.log("SimulatorPreparedStatement.getConnection()");
		return null;
	}

	@Override
	public boolean getMoreResults(final int current) throws SQLException {
		Logger.log("SimulatorPreparedStatement.getMoreResults()");
		return false;
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		Logger.log("SimulatorPreparedStatement.getGeneratedKeys()");
		return null;
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		Logger.log("SimulatorPreparedStatement.getResultSetHoldability()");
		return 0;
	}

	@Override
	public boolean isClosed() throws SQLException {
		Logger.log("SimulatorPreparedStatement.isClosed()");
		return false;
	}

	@Override
	public void setPoolable(final boolean poolable) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setPoolable()");
	}

	@Override
	public boolean isPoolable() throws SQLException {
		Logger.log("SimulatorPreparedStatement.isPoolable()");
		return false;
	}

	@Override
	public <T> T unwrap(final Class<T> iface) throws SQLException {
		Logger.log("SimulatorPreparedStatement.T unwrap()");
		return null;
	}

	@Override
	public boolean isWrapperFor(final Class<?> iface) throws SQLException {
		Logger.log("SimulatorPreparedStatement.isWrapperFor()");
		return false;
	}

	@Override
	public void setNull(final int parameterIndex, final int sqlType) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setNull()");
		setPositionalParameter(parameterIndex, null);
	}

	@Override
	public void setBoolean(final int parameterIndex, final boolean x) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setBoolean()");
		setPositionalParameter(parameterIndex, new ParameterValue(x, boolean.class));
	}

	@Override
	public void setByte(final int parameterIndex, final byte x) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setByte()");
		setPositionalParameter(parameterIndex, new ParameterValue(x, byte.class));
	}

	@Override
	public void setShort(final int parameterIndex, final short x) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setShort()");
		setPositionalParameter(parameterIndex, new ParameterValue(x, short.class));
	}

	@Override
	public void setInt(final int parameterIndex, final int x) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setInt()");
		setPositionalParameter(parameterIndex, new ParameterValue(x, int.class));
	}

	@Override
	public void setLong(final int parameterIndex, final long x) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setLong()");
		setPositionalParameter(parameterIndex, new ParameterValue(x, long.class));
	}

	@Override
	public void setFloat(final int parameterIndex, final float x) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setFloat()");
		setPositionalParameter(parameterIndex, new ParameterValue(x, float.class));
	}

	@Override
	public void setDouble(final int parameterIndex, final double x) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setDouble()");
		setPositionalParameter(parameterIndex, new ParameterValue(x, double.class));
	}

	@Override
	public void setBigDecimal(final int parameterIndex, final BigDecimal x) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setBigDecimal()");
		setPositionalParameter(parameterIndex, new ParameterValue(x, BigDecimal.class));
	}

	@Override
	public void setString(final int parameterIndex, final String x) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setString()");
		setPositionalParameter(parameterIndex, new ParameterValue(x, String.class));
	}

	@Override
	public void setBytes(final int parameterIndex, final byte[] x) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setBytes()");
		setPositionalParameter(parameterIndex, new ParameterValue(x, Array.class));
	}

	@Override
	public void setDate(final int parameterIndex, final Date x) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setDate()");
		setPositionalParameter(parameterIndex, new ParameterValue(x, Date.class));
	}

	@Override
	public void setTime(final int parameterIndex, final Time x) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setTime()");
		setPositionalParameter(parameterIndex, new ParameterValue(x, Time.class));
	}

	@Override
	public void setTimestamp(final int parameterIndex, final Timestamp x) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setTimestamp()");
		setPositionalParameter(parameterIndex, new ParameterValue(x, Timestamp.class));
	}

	@Override
	public void setAsciiStream(final int parameterIndex, final InputStream x, final int length) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setAsciiStream()");
	}

	@Override
	public void setUnicodeStream(final int parameterIndex, final InputStream x, final int length) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setUnicodeStream()");
	}

	@Override
	public void setBinaryStream(final int parameterIndex, final InputStream x, final int length) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setBinaryStream()");
	}

	@Override
	public void clearParameters() throws SQLException {
		Logger.log("SimulatorPreparedStatement.clearParameters()");
		positionalParameters.clear();
	}

	@Override
	public void setObject(final int parameterIndex, final Object x, final int targetSqlType) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setObject()1");
	}

	@Override
	public void setObject(final int parameterIndex, final Object x) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setObject()2");
		if (x != null) {
			setPositionalParameter(parameterIndex, new ParameterValue(x, x.getClass()));
		} else {
			setPositionalParameter(parameterIndex, new ParameterValue(x, null));
		}
	}

	@Override
	public void addBatch() throws SQLException {
		Logger.log("SimulatorPreparedStatement.addBatch()");
	}

	@Override
	public void setCharacterStream(final int parameterIndex, final Reader reader, final int length) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setCharacterStream()");
	}

	@Override
	public void setRef(final int parameterIndex, final Ref x) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setRef()");
	}

	@Override
	public void setBlob(final int parameterIndex, final Blob x) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setBlob()");
	}

	@Override
	public void setClob(final int parameterIndex, final Clob x) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setClob()");
	}

	@Override
	public void setArray(final int parameterIndex, final Array x) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setArray()");
	}

	@Override
	public void setDate(final int parameterIndex, final Date x, final Calendar cal) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setDate()");
	}

	@Override
	public void setTime(final int parameterIndex, final Time x, final Calendar cal) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setTime()");
	}

	@Override
	public void setTimestamp(final int parameterIndex, final Timestamp x, final Calendar cal) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setTimestamp()");
	}

	@Override
	public void setNull(final int parameterIndex, final int sqlType, final String typeName) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setNull()");
	}

	@Override
	public void setURL(final int parameterIndex, final URL x) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setURL()");
	}

	@Override
	public ParameterMetaData getParameterMetaData() throws SQLException {
		Logger.log("SimulatorPreparedStatement.getParameterMetaData()");
		return null;
	}

	@Override
	public void setRowId(final int parameterIndex, final RowId x) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setRowId()");
	}

	@Override
	public void setNString(final int parameterIndex, final String value) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setNString()");
	}

	@Override
	public void setNCharacterStream(final int parameterIndex, final Reader value, final long length) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setNCharacterStream()");
	}

	@Override
	public void setNClob(final int parameterIndex, final NClob value) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setNClob()");
	}

	@Override
	public void setClob(final int parameterIndex, final Reader reader, final long length) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setClob()");
	}

	@Override
	public void setBlob(final int parameterIndex, final InputStream inputStream, final long length) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setBlob()");
	}

	@Override
	public void setNClob(final int parameterIndex, final Reader reader, final long length) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setNClob()");
	}

	@Override
	public void setSQLXML(final int parameterIndex, final SQLXML xmlObject) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setSQLXML()");
	}

	@Override
	public void setObject(final int parameterIndex, final Object x, final int targetSqlType, final int scaleOrLength) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setObject()");
	}

	@Override
	public void setAsciiStream(final int parameterIndex, final InputStream x, final long length) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setAsciiStream()");
	}

	@Override
	public void setBinaryStream(final int parameterIndex, final InputStream x, final long length) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setBinaryStream()");
	}

	@Override
	public void setCharacterStream(final int parameterIndex, final Reader reader, final long length) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setCharacterStream()");
	}

	@Override
	public void setAsciiStream(final int parameterIndex, final InputStream x) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setAsciiStream()");
	}

	@Override
	public void setBinaryStream(final int parameterIndex, final InputStream x) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setBinaryStream()");
	}

	@Override
	public void setCharacterStream(final int parameterIndex, final Reader reader) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setCharacterStream()");
	}

	@Override
	public void setNCharacterStream(final int parameterIndex, final Reader value) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setNCharacterStream()");
	}

	@Override
	public void setClob(final int parameterIndex, final Reader reader) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setClob()");
	}

	@Override
	public void setBlob(final int parameterIndex, final InputStream inputStream) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setBlob()");
	}

	@Override
	public void setNClob(final int parameterIndex, final Reader reader) throws SQLException {
		Logger.log("SimulatorPreparedStatement.setNClob()");
	}

	private static class ParameterValue {
		private final Object value;
		private final Class<?> type;

		public ParameterValue(Object value, Class<?> type) {
			this.value = value;
			this.type = type;
		}
	}

}
